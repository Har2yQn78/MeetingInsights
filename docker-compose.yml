version: '3.8'

services:
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379" # Optional: Expose for external debugging if needed
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped # Added restart policy

  web:
    build: .
    # 'command:' is removed - ENTRYPOINT/CMD from Dockerfile defines the start process
    volumes:
      # Mount media volume for persistent user uploads
      - media_volume:/app/media
      # Static files are now served from within the image (collected during build)
      # Do NOT mount staticfiles_volume here if using WhiteNoise
    ports:
      - "8000:8000"
    env_file:
      - .env # Load variables from .env file (DATABASE_URL MUST point to Neon/external DB)
    environment:
      # Override Redis URLs to use service name
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DJANGO_SETTINGS_MODULE=meetinginsight.settings
      - PYTHONUNBUFFERED=1 # Good practice for python logs in docker
      - DEBUG=${DEBUG:-False}
      # DATABASE_URL, SECRET_KEY, OPENROUTER_API_KEY should be set in .env
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped # Added restart policy

  worker:
    build: .
    # Worker runs its specific command, doesn't need the migration entrypoint
    command: celery -A meetinginsight worker --loglevel=info
    volumes:
      # Mount media if worker needs access to original files
      - media_volume:/app/media
    env_file:
      - .env # Load variables from .env file
    environment:
      # Override Redis URLs to use service name
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DJANGO_SETTINGS_MODULE=meetinginsight.settings
      - PYTHONUNBUFFERED=1
      # DATABASE_URL, SECRET_KEY, OPENROUTER_API_KEY should be set in .env
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped # Added restart policy

volumes:
  redis_data:
  media_volume:
  # staticfiles_volume: # Removed - no longer needed with this setup